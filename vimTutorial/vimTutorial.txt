                           A Vim Tutorial
                           ==============
                                   - Ashwith Jerome Rego
                                     ashwith@ee.iitb.ac.in

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

What is Vim?
  
  - Highly configurable text editor for efficient text editting.
  - An improvement over vi.
  - Works for programming, email, LaTeX reports, config files - 
    anything that involves text files.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

But I already use notepad++/gedit/<insert your favorite text editor>!

Vim is better. Period.
  - Has syntax highlighting, code completion, code folding, anything
    else you'd expect from a programmer's editor.
  - Vim is excellent at backups
    . Power outage and UPS didn't work? No problem!
    . Computer freezes and you need to reset? No problem!
  - Working in Vim is fast - really fast.
  - Very powerful search and replace (regex!).
  - Highly configurable (We'll get to .vimrc).
        . Have a rather long set of commands? Create a keyboard shortcut.
        . Syntax highlighting not there for your favorite language (highly
          unlikely). Create your own (or search online).
        . Need a feature that doesn't exist? Use plugins.
  - All of this doesn't require switching between mouse and keyboard.
  - If you can touch type, you'll love Vim! 
  - You can change jobs without changing your tools.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How do I learn Vim?
  - Practice and practice
  - To learn, in your terminal, run $vimtutor
                 OR
    Go through with this workshop.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Basics
  - Vim is modal - has insert, command and visual modes.
  - Use insert mode to type, command mode to run vim commands.
  - When Vim begins, you're in command mode. Type i to enter into
    insert mode. If you type, notice that characters appear before character
    above the cursor.
  - To get back to command mode, hit the Esc key.
  - If you're unsure which mode you're in, hit Esc twice.
  - To save a file, in command mode, type :w
  - To quit, type :q
  - To save and quit, type :wq
  - If you have any unsaved changes, Vim won't allow you to quit using :q. To
    force quite and ignore any changes, type :q!


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Moving Around
  - In command mode, to navigate one character at a time,
    use the h j k l keys:
                 
                             ^
                             k 
                       < h       l >
                             j
                             v

  - That's a little slow. Use w to advance a word at a time. Use b to move 
    back one word a time. Use W and B to ignore special character such as the
    period, comma, etc.
  - Now combine these with numbers. Try the command 4k. Now try 10b. 
  - 0 goes to the beginning of the line. $ goes to the end.
  - Ctrl-F and Ctrl-B go front and back, respectively by one screen.
  - Within a screen try H, L and M
  - Want to go to line number 10? Type 10G.
  - There's a lot more, but this should get you started.
  - These shortcuts form the basis for others.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cut/Yank(Copy)/Paste
  - Vim has the following commands for moving text:
        . Cut/Delete : d
        . Copy       : y (stands for yank). 
        . Paste      : p
  - The delete and yank commands don't work by themselves.
  - Do delete the next word type dw. To simply copy it, type yw.
  - Do delete the previous word type db. See the pattern?
  - To delete an entire line, use dd (what do you do to copy it?).
  - You can also repeat the command using numbers: 2dd, 2dw, 2db
  - Understand how the pattern works. This makes it easier to remember
    commands.
  - You can also delete a single character by typing x in command mode.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Editing text
  - We've already covered i - it lets you start adding text before the cursor
    position.
  - To append text, type a instead.
  - Use c to change. Just like the d/y commands, c doesn't work by itself:
       cc  - change line
       cw  - change word
       c$  - from cursor to end of line
       2cw - change two words
       ... you get the picture :-)
  - The command 4s lets you change 4 characters (not entire words).
  - R command lets you replace text till you hit Esc.
  - You can join two lines using J
  - Repeat previous command using the period key .
  - To undo an operation type u.
  - To redo, type Ctrl-R

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Buffers and markers
  - Vim allows you to cut/copy stuff to a named buffer. There are 26 named
    buffers - named by the letters of the alphabet.
  - To yank a line to the buffer 'b', type "byy. The quote " tells vim that
    you're accessing a named buffer. The character following that is the name 
    of the buffer you want to yank to. You can use the pattern we've
    learned to use other combinations:
        "xyw - yank word to buffer x
        "xp  - paste from buffer x
        "yd  - delete line and store it in buffer y.
        and so on.
  - Vim also saves your last 9 deletions to numbered buffers. Follow the same
    pattern - "3p will paste the third last deletion.
  - You've seen that you can use, say 10yy to yank 10 lines of text. For larger
    blocks, it can ge hard to count the number of lines. Vim allows you to 
    create markers to various positions in your file. Just like buffers, you
    have 26 named markers.
  - To mark a line with the marker j, type mj. To go to the line marked with 
    marker j, type 'j.
  - Now, to yank from marker a to marker b, simply type 'ay'b.
  - Notice that 'm will go the the first character of the line marked as m.
    If you use `m, it'll go to the exact position where you placed the marker.
  - Suppose you moved to a marker a and want to move back to the position prior
    to this, use `` or '' (can you see the difference between the two?).

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Settings in Vim
  - Vim allows a lot of customization. This can be through options in your
    vimrc, scripts and plugins. We'll cover the vimrc for now.
  - The settings for vim are stored in a file called vimrc. In a *nix system,
    the file is stored as .vimrc in your home directory. There is also a
    default vimrc at /etc/vimrc which is read before your local vimrc.
  - Within vim one can change settings by using :set <setting name>. Suppose
    you want to show line numbers, you can type :set number. To disable the
    line numbers, type :set nonumber - this is another patter to remember. Any
    setting is turned off by adding "no" before the setting name. Many settings
    also have short forms. The line number setting can also be turned on by
    typing :se nu and turned off by typing :se nonu.
  - Here are the list of settings I use in my vimrc:

      se nocompatible
      se cmdheight=2
      se mousehide
      se nohlsearch
      se incsearch
      se ruler
      se autoindent
      se expandtab
      se tabstop=2
      se textwidth=79
      se autoindent
      se shiftwidth=2
      se softtabstop=2
      se guifont=Monospace\ 10
      se colorcolumn=80
      se noerrorbells
      se laststatus=2
      se t_Co=256
      se fillchars+=stl:\ ,stlnc:\
      se encoding=utf-8
      se clipboard=unnamed
      se mouse=a
    Some of these will be obvious and some won't. To know what a setting does,
    type :help <setting name>. Type :help expandtab to know what it does. This
    setting is very helpful for programmers but must be turned off while
    writing Makefiles (that's another tutorial!).

  - You can also use various color schemes in Vim. To set a color scheme, try
    typing :color darkblue to change the color scheme. You can also type :color
    followed by Ctrl-D to list the list of color schemes available. Adding
    the line "color darkblue" (without quotes) will ensure that vim always
    loads with this color scheme.
  - Vim's color schemes are stored in .vim files. You can get several of these
    online. As an example, I use the jellybeans scheme available on
            https://github.com/nanotech/jellybeans.vim
    To "install" a scheme, go to ~/.vim/colors directory (create them if they
    doesn't exist) and save the downloaded file there. Then use the color
    option followed by the name of the .vim file (without the extension).

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Features for Programmers - Syntax Highlighting, code folding, code completion
                           and others.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Search and Replace

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Miscellaneous features - spell check, backups and crash recovery

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
